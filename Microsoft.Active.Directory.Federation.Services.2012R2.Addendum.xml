<?xml version="1.0" encoding="utf-8"?><ManagementPack ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="1.1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <Manifest>
    <Identity>
      <ID>Microsoft.Active.Directory.Federation.Services.2012R2.Addendum</ID>
      <Version>1.0.1.8</Version>
    </Identity>
    <Name>Microsoft Active Directory Federation Services 2012R2 Addendum</Name>
    <References>
      <Reference Alias="Health">
        <ID>System.Health.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="MADFS2">
        <ID>Microsoft.ActiveDirectoryFederationServices.2012.R2</ID>
        <Version>7.1.10173.1</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="MSIGL">
        <ID>Microsoft.SystemCenter.InstanceGroup.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="MWIIS2">
        <ID>Microsoft.Windows.InternetInformationServices.2012</ID>
        <Version>7.0.10249.1</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
	  <Reference Alias="MWS2R2D">
        <ID>Microsoft.Windows.Server.2012.R2.Discovery</ID>
        <Version>6.0.7323.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="MWSL">
        <ID>Microsoft.Windows.Server.Library</ID>
        <Version>10.0.0.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="SC">
        <ID>Microsoft.SystemCenter.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="SCCUC">
        <ID>SystemCenterCentral.Utilities.Certificates</ID>
        <Version>1.4.3.0</Version>
        <PublicKeyToken>e5c80663d573f08c</PublicKeyToken>
      </Reference>
      <Reference Alias="System">
        <ID>System.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Windows">
        <ID>Microsoft.Windows.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
    </References>
  </Manifest>
  <TypeDefinitions>
	<EntityTypes>
	  <ClassTypes>
        <ClassType ID="Microsoft.Active.Directory.Federation.Services.2012R2.Monitoring.Group" Accessibility="Public" Abstract="false" Base="MSIGL!Microsoft.SystemCenter.InstanceGroup" Hosted="false" Singleton="true" Extension="false" />
	  </ClassTypes>
	</EntityTypes>
    <ModuleTypes>
      <DataSourceModuleType ID="Microsoft.Active.Directory.Federation.Services.2012R2.SummaryReport.Script.DataSource" Accessibility="Internal" Batching="false">
        <Configuration>
		  <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />	
        </Configuration>
        <OverrideableParameters>
		  <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <WeeklySchedule>
                    <Windows>
                      <Daily>
                        <Start>06:12</Start>
                        <End>06:32</End>
                        <DaysOfWeekMask>62</DaysOfWeekMask>
                      </Daily>
                    </Windows>
                  </WeeklySchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                 <ScriptName>Microsoft.Active.Directory.Federation.Services.2012R2.SummaryReport.Script.DataSource.v1018.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather ADF.2012R2.alerts and close via on demand task
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Microsoft.Active.Directory.Federation.Services.2012R2.SummaryReport.Script.DataSource.v1018.ps1"
$EventID = "590"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"
$Age = [DateTime](Get-Date).AddDays(-1)

$momapi.LogScriptEvent($ScriptName,$EventID,0,"Gather ADF.2012R2.services Alert report for date ($date).")

$DSMessage = "Proactive DailyTasks - Daily Summary ADFS 2012R2 Alerts for date ($date)."


# Grab past 24 hours
if ( (get-date).DayOfWeek -ne "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-1)
	}
if ( (get-date).DayOfWeek -eq "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-3)
	}


# Gather ADFS 2012+ alerts
# Method logic provided by Andrew Bradley
## Grab the MP, get the Monitors and Rules from the MP, then grab all alerts found inside the Monitors/Rules
$SCOMCoreMP = Get-SCOMManagementPack -DisplayName "Active Directory Federation Services 2012 R2"
$SCOMCoreRules = $SCOMCoreMP.GetRules()
$SCOMCoreMonitors = $SCOMCoreMP.GetMonitors()

$SCOMCoreReportAlerts = Get-SCOMAlert -ResolutionState (0..254) | ? { ($_.Name -in $SCOMCoreRules.DisplayName) -or ($_.Name -in $SCOMCoreMonitors.DisplayName) }
$SCOMCoreReportAlerts.Count

$SCOMCoreRuleAlerts = $SCOMCoreReportAlerts | ? { ( $_.Name -in $SCOMCoreRules.DisplayName) }
$SCOMCoreRuleAlerts.Count

$SCOMCoreMonitorAlerts = $SCOMCoreReportAlerts | ? { ($_.Name -in $SCOMCoreMonitors.DisplayName ) }
$SCOMCoreMonitorAlerts.Count

# Open/Closed breakout
$OpenADFSAlerts = $SCOMCoreReportAlerts
#$OpenADFSAlerts.Count
$ClosedADFSAlerts = Get-SCOMAlert -ResolutionState 255 | ? { ($_.Name -in $SCOMCoreRules.DisplayName) -or ($_.Name -in $SCOMCoreMonitors.DisplayName) }
#$ClosedADFSAlerts.Count

#$Test = $ADFSAlerts.Count
$Test = $SCOMCoreReportAlerts.Count


# Open ADFS server alerts since last report
$ADFSAlertsSinceReport = $SCOMCoreReportAlerts | ? { $_.TimeRaised -gt $Time }
$ADFSAlertsSinceReport
#$ADFSAlertsSinceReport.Count


# Check for open alerts older than reporting period
$OpenAlerts = $SCOMCoreReportAlerts
$OpenAlertDetail = $OpenAlerts | ft TimeRaised,NetbiosComputerName,Name -auto

$OpenADFSAlertsSinceReport = $ADFSAlertsSinceReport
#$OpenADFSAlertsSinceReport.Count

# Alerts closed within report period $Time
$ClosedAlerts = $ClosedADFSAlerts
$ClosedAlertDetail = $ClosedAlerts | ft TimeRaised,NetbiosComputerName,Name -auto

$Test = $ADFSAlerts.Count


$Alerts = $ADFSAlerts | ft TimeRaised,NetbiosComputerName,Name -auto -wrap

$AlertSorted = @()

foreach ( $Name in $($ADFSAlerts.Name | sort -uniq) )
	{
	$AlertSorted += $Name
	$AlertSorted +=	$ADFSAlerts | ? { $_.Name -eq $Name } | ft TimeRaised,NetbiosComputerName,Name -auto
	$AlertSorted += "#====================================="
	}


# Check for open alerts older than reporting period
$OpenAlerts = $ADFSAlerts | ? { $_.ResolutionState -ne 255 }

$OpenAlertDetail = $OpenAlerts | ft TimeRaised,NetbiosComputerName,Name -auto

# Alerts closed within report period $Time
$ClosedAlerts = $ADFSAlerts | ? { $_.ResolutionState -eq 255 }



$ADFSMessage = @()

if ( $ADFSAlerts.count -eq 0 )
	{
	$ADFSMessage += ""
	$ADFSMessage += "ZERO Active Directory Federation Services 2012R2 alerts for ($date)."
	$ADFSMessage += ""
	}

if ( $ADFSAlerts.count -gt 0 )
	{
	$ADFSMessage += ""
	$ADFSMessage += $DSMessage
	$ADFSMessage += ""
	$ADFSMessage += "#"
	$ADFSMessage += "# Open ADFS 2012R2 alert count = $($OpenAlerts.Count)"
	$ADFSMessage += "#=========================================="
	$ADFSMessage += $OpenAlertDetail
	$ADFSMessage += "#========================================================"
	$ADFSMessage += "#"
	$ADFSMessage += "# Alerts since last report run = $($ADFSAlerts.Count)"
	$ADFSMessage += "#"
	$ADFSMessage += "# Closed alerts since last report run = $($ClosedAlerts.Count)"
	$ADFSMessage += "#"	
	$ADFSMessage += "# Alert details (since last report run)"
	$ADFSMessage += "#========================================================"
	$ADFSMessage += $AlertSorted
	$ADFSMessage += "#========================================================"
	$ADFSMessage += ""
	}
	
$ADFSMessage

$ADFSMessage = $ADFSMessage | out-string

# Log
$Summary = "$ADFSMessage `n `nDisclaimer:  This daily summary report is to document the manual tasks used by NOSC to check AD and AD Replication health, Pending Reboot Report, Logical Disk errors,Expiring Certificates, Unhealthy Server/Agents, Unhealthy agent workflow/script alerts, and Servers in Maintenance Mode"

if ( $ADFSAlerts.count -gt 0 )
	{
	$bag.AddValue('Count',$Test)
	$bag.AddValue('Message',$DSMessage)
	$bag.AddValue('Summary',$Summary)

	$momapi.LogScriptEvent($ScriptName,$EventID,0,"$Summary")
	}

if ( $ADFSAlerts.count -eq 0 )
	{
	$Message += "ZERO Active Directory Federation Services 2012R2 alerts for ($date)."
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"`nZERO Active Directory Federation Services 2012R2 alerts for ($date).")
	
	$bag.AddValue('Count',$Test)
	$bag.AddValue('Message',$DSMessage)
	$bag.AddValue('Summary',$Summary)
	}

# Return all bags
$bag



#
# Rule Alerts to auto close
#=================================================================================
# (Rules) Alerts to auto close after reset monitor
$SCOMCoreRulesToClear = $SCOMCoreRuleAlerts | where { ( $_.TimeAdded -lt $Age ) }
# Convert Age back to days for alert properties logging

$Days = ((Get-date) - $Age).Days
if ( $SCOMCoreRulesToClear.Count -gt 0 )
	{
	$SCOMCoreRulesToClear | Resolve-SCOMAlert -Comment "Closing $Days day old alerts after report alert generated - ADFS2012R2 Addendum Automation DS"
	}


# Write event for rule closure
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Proactive DailyTasks ADFS2012R2 rule reset completed for ($date)")


# Monitor Alerts to auto close after rule automation
#=================================================================================

#=================================================================================
# Reset Monitors Script base code modified
# Put ps1 in mgmtpacks folder
# https://sc.scomurr.com/scom-2012-monitor-reset-cleaning-up-the-environment/
#	Download
# https://gallery.technet.microsoft.com/SCOM-2012-Batch-reset-63a17534
	
#Alternate
#https://gallery.technet.microsoft.com/scriptcenter/Auto-reset-script-for-d8b775ca

# Changed up logic to sort unique classes in mgmnt pack families.
# Added Age variable for monitors thanks to Aris Somatis - $Age specified in top level variables
# Cycling through monitors made reset loop huge ~650 monitors when only ~50 classes
# New logic reduced runtime from 8 minutes to roughly 8 seconds
#=================================================================================


# Write event for rule closure
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Begin ADFS 2012R2 Monitor Reset for date ($date).")


if ( $SCOMCoreReportAlerts.Count -gt 0 )
	{
	# Get AD classes - Ex. Microsoft.Windows.Server.AD.2016.Discovery, Microsoft.Windows.Server.AD.Library
		$ADMonitoring = $SCOMCoreMP

	# ADFS pack naming
	#$ADFSClasses = @(Get-SCOMClass -ManagementPack $ADLibrary; Get-SCOMClass -ManagementPack $ADDiscovery; )
	$ADFSClasses = @(Get-SCOMClass -ManagementPack $ADMonitoring; )
	$ADFSClass = $ADFSClasses | sort -property Name -uniq
	# Debug
	$ADFSClass.Count

	# Set up monitor objects to reset
	foreach ($Class in $ADFSClass)
		{
		$ActiveMonitors = @(Get-SCOMClassInstance -Class $Class | ? { ($_.healthstate -ne 'Success') -AND ( $_.healthstate -ne 'Uninitialized') -AND ($_.IsAvailable -eq $true) } )
		# Debug
		$ActiveMonitors.Count
		# $ActiveMonitors | fl -property *
		write-host "Found" $ActiveMonitors.Count "unhealthy monitors for class" $Class
		foreach ( $UnhealthyOLDMonitor in $ActiveMonitors )
			{
			#if ( $UnhealthyOLDMonitor.AvailabilityLastModified -lt $Age )
			if ( $UnhealthyOLDMonitor.StateLastModified -lt $Age )
				{
				#$UnhealthyMonitors += $ActiveMonitors.Count
				#UnhealthyOLDMonitor | select AvailabilityLastModified,Path,DisplayName
				#$UnhealthyOLDMonitor.Count
				#write-host "Found" + $UnhealthyOLDMonitor.Count + "unhealthy monitor beyond" $Age "days."
				#write-host ""
				if ( $ActiveMonitors.Count -gt 0)
					{
					foreach ( $ActiveMonitor in $UnhealthyOLDMonitor )
						{
						# Debug
						$ActiveMonitor.ID
						write-host " Resetting Health State on '" + $ActiveMonitor.FullName + "'" 
						write-host ""
						$ActiveMonitor.ResetMonitoringState($ActiveMonitor)
						}
					}
				}
			}
		}
	# Debug
	#$MonitorClass | fl -property *
	#$MonitorClass | select DisplayName,ID
	}


# Debug Write event for rule closure
#=================================================================================
# Write event for rule closure
$momapi.LogScriptEvent($ScriptName,$EventID,0,"ADFS 2012R2 Monitor Reset completed for date ($date).")


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Microsoft.Active.Directory.Federation.Services.2012R2.EventID7031.Monitor.DataSource" Accessibility="Internal" Batching="false">
        <Configuration>
		  <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
		  <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
		  <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />	
        </Configuration>
        <OverrideableParameters>
		  <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
		  <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
		  <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
					<SyncTime>$Config/SyncTime$</SyncTime>
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                <ScriptName>Microsoft.Active.Directory.Federation.Services.2012R2.EventID7031.Monitor.DataSource.v1018.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Check for 7031 events for ADFS adfssrv for Operational awareness
#
#  Author:  Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.
$ScriptName = "Microsoft.Active.Directory.Federation.Services.2012R2.EventID7031.Monitor.DataSource.v1018.ps1"
$EventID = "592"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
# Load PropertyBag function 
$bag = $momapi.CreatePropertyBag()
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Script is starting. `n Running as ($whoami).")
#=================================================================================


# Begin MAIN script section
#=================================================================================
$ServiceName = "adfssrv"

#
#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"

$momapi.LogScriptEvent($ScriptName,$EventID,0,"Gather ADFS2012R2 7031Event Alerts for date ($date).")

# Grab past 5 minutes
$Time = [DateTime](Get-Date).AddMinutes(-5)

$SystemEvents = get-eventlog -LogName "System" | ? { ( $_.TimeGenerated -gt $Time ) `
	} | ? { ( $_.EventID -eq 7031 ) -AND ($_.Message -like "*$ServiceName*") `
	}
	# -OR ($_.Message -like "*masvc*") ) `


# Gather report data
$7031ADFSMessage = @()


if ( $SystemEvents.count -eq 0 )
	{
	$7031ADFSMessage += ""
	$7031ADFSMessage += "ZERO Active Directory Federation Services ADFS 2012R2 service failures for ($date)."
	$7031ADFSMessage += ""
	}

if ( $SystemEvents.count -gt 0 )
	{
	$7031ADFSMessage += ""
	$7031ADFSMessage += "#"
	$7031ADFSMessage += "# Number of 7031 Events with ADFS2012R2 service failures"
	$7031ADFSMessage += $SystemEvents.Count
	$7031ADFSMessage += ""
	$7031ADFSMessage += "# Details"
	$7031ADFSMessage += "#========================================================"
	$7031ADFSMessage += $SystemEvents | ft Message,TimeGenerated -auto
	$7031ADFSMessage += "#========================================================"
	$7031ADFSMessage += ""

	$7031ADFSMessage

	$7031ADFSMessage = $7031ADFSMessage | out-string

# Check if service is running
	if ( $(get-service $ServiceName).Status -ne "running" )
		{
		restart-service $ServiceName; sleep 15
		}

	if ( $(get-service $ServiceName).Status -ne "running" )
		{
		#Set the condition = bad.  This represents your script finding something wrong
		$strCondition = "Bad"

		$momapi.LogScriptEvent($ScriptName,$EventID,0,"ADFS2012R2 service $ServiceName NOT running after automated service restart")
		$momapi.LogScriptEvent($ScriptName,$EventID,0,"$7031ADFSMessage")

		$bag.AddValue('Result','BadCondition')
		$bag.AddValue('Count',$SystemEvents.count)
		$bag.AddValue('Summary',$7031ADFSMessage)
		}
	}

if ( $SystemEvents.count -eq 0 )
	{
	$strCondition = "Good"
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"NO ADFS2012R2 7031 events found in past 15 minutes")

	$bag.AddValue('Result','GoodCondition')
	$bag.AddValue('Count',$SystemEvents.count)
	$bag.AddValue('Summary',$7031ADFSMessage)
	}


# Return all bags
$bag


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
      <WriteActionModuleType ID="Microsoft.Active.Directory.Federation.Services.2012R2.SummaryReport.Script.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Microsoft.Active.Directory.Federation.Services.2012R2.SummaryReport.Script.WA.v1018.ps1</ScriptName>
                <ScriptBody>
#=================================================================================
#  Script to gather ADF.2012R2.alerts and close via on demand task
#
#  Author: Kevin Justin
#  v1.0
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging.
# ScriptName should be the same as the ID of the module that the script is contained in
$ScriptName = "Microsoft.Active.Directory.Federation.Services.2012R2.SummaryReport.Script.DataSource.v1018.ps1"
$EventID = "591"
#=================================================================================


# Starting Script section - All scripts get this
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Script is starting. `n Running as ($whoami).")
#=================================================================================


# PropertyBag Script section - Monitoring scripts get this
#=================================================================================
# Load SCOM PropertyBag function
$bag = $momapi.CreatePropertyBag()
#=================================================================================


# Begin MAIN script section
#=================================================================================

#For a simple example - get files in Windows Temp:
$date = get-date -uFormat "%Y-%m-%d"
$Age = [DateTime](Get-Date).AddDays(-1)

$momapi.LogScriptEvent($ScriptName,$EventID,0,"Gather ADF.2012R2.services Alert report for date ($date).")

$DSMessage = "Proactive DailyTasks - Daily Summary ADFS 2012R2 Alerts for date ($date)."


# Grab past 24 hours
if ( (get-date).DayOfWeek -ne "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-1)
	}
if ( (get-date).DayOfWeek -eq "Monday" )
	{
	$Time = [DateTime](Get-Date).AddDays(-3)
	}


# Gather ADFS 2012+ alerts
# Method logic provided by Andrew Bradley
## Grab the MP, get the Monitors and Rules from the MP, then grab all alerts found inside the Monitors/Rules
$SCOMCoreMP = Get-SCOMManagementPack -DisplayName "Active Directory Federation Services 2012 R2"
$SCOMCoreRules = $SCOMCoreMP.GetRules()
$SCOMCoreMonitors = $SCOMCoreMP.GetMonitors()

$SCOMCoreReportAlerts = Get-SCOMAlert -ResolutionState (0..254) | ? { ($_.Name -in $SCOMCoreRules.DisplayName) -or ($_.Name -in $SCOMCoreMonitors.DisplayName) }
$SCOMCoreReportAlerts.Count

$SCOMCoreRuleAlerts = $SCOMCoreReportAlerts | ? { ( $_.Name -in $SCOMCoreRules.DisplayName) }
$SCOMCoreRuleAlerts.Count

$SCOMCoreMonitorAlerts = $SCOMCoreReportAlerts | ? { ($_.Name -in $SCOMCoreMonitors.DisplayName ) }
$SCOMCoreMonitorAlerts.Count

# Open/Closed breakout
$OpenADFSAlerts = $SCOMCoreReportAlerts
#$OpenADFSAlerts.Count
$ClosedADFSAlerts = Get-SCOMAlert -ResolutionState 255 | ? { ($_.Name -in $SCOMCoreRules.DisplayName) -or ($_.Name -in $SCOMCoreMonitors.DisplayName) }
#$ClosedADFSAlerts.Count

#$Test = $ADFSAlerts.Count
$Test = $SCOMCoreReportAlerts.Count


# Open ADFS server alerts since last report
$ADFSAlertsSinceReport = $SCOMCoreReportAlerts | ? { $_.TimeRaised -gt $Time }
$ADFSAlertsSinceReport
#$ADFSAlertsSinceReport.Count


# Check for open alerts older than reporting period
$OpenAlerts = $SCOMCoreReportAlerts
$OpenAlertDetail = $OpenAlerts | ft TimeRaised,NetbiosComputerName,Name -auto

$OpenADFSAlertsSinceReport = $ADFSAlertsSinceReport
#$OpenADFSAlertsSinceReport.Count

# Alerts closed within report period $Time
$ClosedAlerts = $ClosedADFSAlerts
$ClosedAlertDetail = $ClosedAlerts | ft TimeRaised,NetbiosComputerName,Name -auto

$Test = $ADFSAlerts.Count


$Alerts = $ADFSAlerts | ft TimeRaised,NetbiosComputerName,Name -auto -wrap

$AlertSorted = @()

foreach ( $Name in $($ADFSAlerts.Name | sort -uniq) )
	{
	$AlertSorted += $Name
	$AlertSorted +=	$ADFSAlerts | ? { $_.Name -eq $Name } | ft TimeRaised,NetbiosComputerName,Name -auto
	$AlertSorted += "#====================================="
	}


# Check for open alerts older than reporting period
$OpenAlerts = $ADFSAlerts | ? { $_.ResolutionState -ne 255 }

$OpenAlertDetail = $OpenAlerts | ft TimeRaised,NetbiosComputerName,Name -auto

# Alerts closed within report period $Time
$ClosedAlerts = $ADFSAlerts | ? { $_.ResolutionState -eq 255 }



$ADFSMessage = @()

if ( $ADFSAlerts.count -eq 0 )
	{
	$ADFSMessage += ""
	$ADFSMessage += "ZERO Active Directory Federation Services 2012R2 alerts for ($date)."
	$ADFSMessage += ""
	}

if ( $ADFSAlerts.count -gt 0 )
	{
	$ADFSMessage += ""
	$ADFSMessage += $DSMessage
	$ADFSMessage += ""
	$ADFSMessage += "#"
	$ADFSMessage += "# Open ADFS 2012R2 alert count = $($OpenAlerts.Count)"
	$ADFSMessage += "#=========================================="
	$ADFSMessage += $OpenAlertDetail
	$ADFSMessage += "#========================================================"
	$ADFSMessage += "#"
	$ADFSMessage += "# Alerts since last report run = $($ADFSAlerts.Count)"
	$ADFSMessage += "#"
	$ADFSMessage += "# Closed alerts since last report run = $($ClosedAlerts.Count)"
	$ADFSMessage += "#"	
	$ADFSMessage += "# Alert details (since last report run)"
	$ADFSMessage += "#========================================================"
	$ADFSMessage += $AlertSorted
	$ADFSMessage += "#========================================================"
	$ADFSMessage += ""
	}
	
$ADFSMessage

$ADFSMessage = $ADFSMessage | out-string

# Log
$Summary = "$ADFSMessage `n `nDisclaimer:  This daily summary report is to document the manual tasks used by NOSC to check AD and AD Replication health, Pending Reboot Report, Logical Disk errors,Expiring Certificates, Unhealthy Server/Agents, Unhealthy agent workflow/script alerts, and Servers in Maintenance Mode"

if ( $ADFSAlerts.count -gt 0 )
	{
	$bag.AddValue('Count',$Test)
	$bag.AddValue('Message',$DSMessage)
	$bag.AddValue('Summary',$Summary)

	$momapi.LogScriptEvent($ScriptName,$EventID,0,"$Summary")
	}

if ( $ADFSAlerts.count -eq 0 )
	{
	$Message += "ZERO Active Directory Federation Services 2012R2 alerts for ($date)."
	$momapi.LogScriptEvent($ScriptName,$EventID,0,"`nZERO Active Directory Federation Services 2012R2 alerts for ($date).")
	
	$bag.AddValue('Count',$Test)
	$bag.AddValue('Message',$DSMessage)
	$bag.AddValue('Summary',$Summary)
	}

# Return all bags
$bag



#
# Rule Alerts to auto close
#=================================================================================
# (Rules) Alerts to auto close after reset monitor
$SCOMCoreRulesToClear = $SCOMCoreRuleAlerts | where { ( $_.TimeAdded -lt $Age ) }
# Convert Age back to days for alert properties logging

$Days = ((Get-date) - $Age).Days
if ( $SCOMCoreRulesToClear.Count -gt 0 )
	{
	$SCOMCoreRulesToClear | Resolve-SCOMAlert -Comment "Closing $Days day old alerts after report alert generated - ADFS2012R2 Addendum Automation DS"
	}


# Write event for rule closure
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Proactive DailyTasks ADFS2012R2 rule reset completed for ($date)")


# Monitor Alerts to auto close after rule automation
#=================================================================================

#=================================================================================
# Reset Monitors Script base code modified
# Put ps1 in mgmtpacks folder
# https://sc.scomurr.com/scom-2012-monitor-reset-cleaning-up-the-environment/
#	Download
# https://gallery.technet.microsoft.com/SCOM-2012-Batch-reset-63a17534
	
#Alternate
#https://gallery.technet.microsoft.com/scriptcenter/Auto-reset-script-for-d8b775ca

# Changed up logic to sort unique classes in mgmnt pack families.
# Added Age variable for monitors thanks to Aris Somatis - $Age specified in top level variables
# Cycling through monitors made reset loop huge ~650 monitors when only ~50 classes
# New logic reduced runtime from 8 minutes to roughly 8 seconds
#=================================================================================


# Write event for rule closure
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Begin ADFS 2012R2 Monitor Reset for date ($date).")


if ( $SCOMCoreReportAlerts.Count -gt 0 )
	{
	# Get AD classes - Ex. Microsoft.Windows.Server.AD.2016.Discovery, Microsoft.Windows.Server.AD.Library
		$ADMonitoring = $SCOMCoreMP

	# ADFS pack naming
	#$ADFSClasses = @(Get-SCOMClass -ManagementPack $ADLibrary; Get-SCOMClass -ManagementPack $ADDiscovery; )
	$ADFSClasses = @(Get-SCOMClass -ManagementPack $ADMonitoring; )
	$ADFSClass = $ADFSClasses | sort -property Name -uniq
	# Debug
	$ADFSClass.Count

	# Set up monitor objects to reset
	foreach ($Class in $ADFSClass)
		{
		$ActiveMonitors = @(Get-SCOMClassInstance -Class $Class | ? { ($_.healthstate -ne 'Success') -AND ( $_.healthstate -ne 'Uninitialized') -AND ($_.IsAvailable -eq $true) } )
		# Debug
		$ActiveMonitors.Count
		# $ActiveMonitors | fl -property *
		write-host "Found" $ActiveMonitors.Count "unhealthy monitors for class" $Class
		foreach ( $UnhealthyOLDMonitor in $ActiveMonitors )
			{
			#if ( $UnhealthyOLDMonitor.AvailabilityLastModified -lt $Age )
			if ( $UnhealthyOLDMonitor.StateLastModified -lt $Age )
				{
				#$UnhealthyMonitors += $ActiveMonitors.Count
				#UnhealthyOLDMonitor | select AvailabilityLastModified,Path,DisplayName
				#$UnhealthyOLDMonitor.Count
				#write-host "Found" + $UnhealthyOLDMonitor.Count + "unhealthy monitor beyond" $Age "days."
				#write-host ""
				if ( $ActiveMonitors.Count -gt 0)
					{
					foreach ( $ActiveMonitor in $UnhealthyOLDMonitor )
						{
						# Debug
						$ActiveMonitor.ID
						write-host " Resetting Health State on '" + $ActiveMonitor.FullName + "'" 
						write-host ""
						$ActiveMonitor.ResetMonitoringState($ActiveMonitor)
						}
					}
				}
			}
		}
	# Debug
	#$MonitorClass | fl -property *
	#$MonitorClass | select DisplayName,ID
	}


# Debug Write event for rule closure
#=================================================================================
# Write event for rule closure
$momapi.LogScriptEvent($ScriptName,$EventID,0,"ADFS 2012R2 Monitor Reset completed for date ($date).")


# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
#=================================================================================
# End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
    </ModuleTypes>
    <MonitorTypes>
     <UnitMonitorType ID="Microsoft.Active.Directory.Federation.Services.2012R2.Service.Monitor.MonitorType" Accessibility="Public">
        <MonitorTypeStates>
          <MonitorTypeState ID="Running" NoDetection="false" />
          <MonitorTypeState ID="NotRunning" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element name="ComputerName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="ServiceName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="CheckStartupType" minOccurs="0" maxOccurs="1" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element name="Samples" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>		
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="CheckStartupType" Selector="$Config/CheckStartupType$" ParameterType="string" />
          <OverrideableParameter ID="Samples" Selector="$Config/Samples$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.Win32ServiceInformationProvider">
              <ComputerName>$Config/ComputerName$</ComputerName>
              <ServiceName>$Config/ServiceName$</ServiceName>
              <Frequency>$Config/IntervalSeconds$</Frequency>
              <DisableCaching>true</DisableCaching>
              <CheckStartupType>$Config/CheckStartupType$</CheckStartupType>
            </DataSource>
            <ProbeAction ID="Probe" TypeID="Windows!Microsoft.Windows.Win32ServiceInformationProbe">
              <ComputerName>$Config/ComputerName$</ComputerName>
              <ServiceName>$Config/ServiceName$</ServiceName>
            </ProbeAction>
            <ConditionDetection ID="ServiceRunning" TypeID="System!System.ExpressionFilter">
              <Expression>
                <Or>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="Integer">Property[@Name='StartMode']</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="Integer">4</Value> <!-- 0=BootStart 1=SystemStart 2=Automatic 3=Manual 4=Disabled -->
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="Integer">Property[@Name='State']</XPathQuery>
                      </ValueExpression>
                      <Operator>Equal</Operator>
                      <ValueExpression>
                        <Value Type="Integer">4</Value> <!-- 0=Unknown 1=Stopped 2=StartPending 3=StopPending 4=Running 5=ContinuePending 6=PausePending 7=Paused 8=ServiceNotFound 9=ServerNotFound -->
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                </Or>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="ServiceNotRunning" TypeID="System!System.ExpressionFilter">
              <Expression>
                <And>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="Integer">Property[@Name='StartMode']</XPathQuery>
                      </ValueExpression>
                      <Operator>NotEqual</Operator>
                      <ValueExpression>
                        <Value Type="Integer">4</Value> <!-- 0=BootStart 1=SystemStart 2=Automatic 3=Manual 4=Disabled -->
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                  <Expression>
                    <SimpleExpression>
                      <ValueExpression>
                        <XPathQuery Type="Integer">Property[@Name='State']</XPathQuery>
                      </ValueExpression>
                      <Operator>NotEqual</Operator>
                      <ValueExpression>
                        <Value Type="Integer">4</Value> <!-- 0=Unknown 1=Stopped 2=StartPending 3=StopPending 4=Running 5=ContinuePending 6=PausePending 7=Paused 8=ServiceNotFound 9=ServerNotFound -->
                      </ValueExpression>
                    </SimpleExpression>
                  </Expression>
                </And>
              </Expression>
              <SuppressionSettings>
                <MatchCount>$Config/Samples$</MatchCount>
              </SuppressionSettings>			  
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="Running">
              <Node ID="ServiceRunning">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="NotRunning">
              <Node ID="ServiceNotRunning">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
          <OnDemandDetections>
            <OnDemandDetection MonitorTypeStateID="Running">
              <Node ID="ServiceRunning">
                <Node ID="Probe" />
              </Node>
            </OnDemandDetection>
            <OnDemandDetection MonitorTypeStateID="NotRunning">
              <Node ID="ServiceNotRunning">
                <Node ID="Probe" />
              </Node>
            </OnDemandDetection>
          </OnDemandDetections>
        </MonitorImplementation>
      </UnitMonitorType>
     <UnitMonitorType ID="Microsoft.Active.Directory.Federation.Services.2012R2.EventID7031.Monitor.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="GoodCondition" NoDetection="false" />
          <MonitorTypeState ID="BadCondition" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
		  <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
		  <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
		  <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />	
        </Configuration>
        <OverrideableParameters>
		  <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
		  <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
		  <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DS" TypeID="Microsoft.Active.Directory.Federation.Services.2012R2.EventID7031.Monitor.DataSource">
			  <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
			  <SyncTime>$Config/SyncTime$</SyncTime>	
			  <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
            </DataSource>
            <ConditionDetection ID="GoodConditionFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">GoodCondition</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="BadConditionFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">BadCondition</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="GoodCondition">
              <Node ID="GoodConditionFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="BadCondition">
              <Node ID="BadConditionFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
          <OnDemandDetections>
            <OnDemandDetection MonitorTypeStateID="GoodCondition">
              <Node ID="GoodConditionFilter">
                <Node ID="DS" />
              </Node>
            </OnDemandDetection>
            <OnDemandDetection MonitorTypeStateID="BadCondition">
              <Node ID="BadConditionFilter">
                <Node ID="DS" />
              </Node>
            </OnDemandDetection>
          </OnDemandDetections>
        </MonitorImplementation>
      </UnitMonitorType>
    </MonitorTypes>
  </TypeDefinitions>
  <Monitoring>
    <Discoveries>
      <Discovery ID="Microsoft.Active.Directory.Federation.Services.2012R2.Monitoring.Group.Discovery" Enabled="true" Target="Microsoft.Active.Directory.Federation.Services.2012R2.Monitoring.Group" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryRelationship TypeID="MSIGL!Microsoft.SystemCenter.InstanceGroupContainsEntities" />
        </DiscoveryTypes>
        <DataSource ID="GroupPopulationDataSource" TypeID="SC!Microsoft.SystemCenter.GroupPopulator">
          <RuleId>$MPElement$</RuleId>
          <GroupInstanceId>$MPElement[Name="Microsoft.Active.Directory.Federation.Services.2012R2.Monitoring.Group"]$</GroupInstanceId>
          <MembershipRules>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="Windows!Microsoft.Windows.Computer"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="MSIGL!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <Property>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Property>
                  </ValueExpression>
                  <Operator>MatchesRegularExpression</Operator>
                  <Pattern>(?i)##ADFSServers##</Pattern>
                </RegExExpression>
              </Expression>
            </MembershipRule>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="MWS2R2D!Microsoft.Windows.Server.2012.R2.OperatingSystem"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="MSIGL!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <HostProperty>
                      <MonitoringClass>$MPElement[Name="Windows!Microsoft.Windows.Computer"]$</MonitoringClass>
                      <Property>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Property>
                    </HostProperty>
                  </ValueExpression>
                  <Operator>MatchesRegularExpression</Operator>
                  <Pattern>(?i)##ADFSServers##</Pattern>
                </RegExExpression>
              </Expression>
            </MembershipRule>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="MWSL!Microsoft.Windows.Server.6.2.Processor"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="MSIGL!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <HostProperty>
                      <MonitoringClass>$MPElement[Name="Windows!Microsoft.Windows.Computer"]$</MonitoringClass>
                      <Property>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Property>
                    </HostProperty>
                  </ValueExpression>
                  <Operator>MatchesRegularExpression</Operator>
                  <Pattern>(?i)##ADFSServers##</Pattern>
                </RegExExpression>
              </Expression>
            </MembershipRule>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="MWSL!Microsoft.Windows.Server.6.2.LogicalDisk"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="MSIGL!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <HostProperty>
                      <MonitoringClass>$MPElement[Name="Windows!Microsoft.Windows.Computer"]$</MonitoringClass>
                      <Property>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Property>
                    </HostProperty>
                  </ValueExpression>
                  <Operator>MatchesRegularExpression</Operator>
                  <Pattern>(?i)##ADFSServers##</Pattern>
                </RegExExpression>
              </Expression>
            </MembershipRule>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="SCCUC!SystemCenterCentral.Utilities.Certificates.Certificate"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="MSIGL!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <HostProperty>
                      <MonitoringClass>$MPElement[Name="Windows!Microsoft.Windows.Computer"]$</MonitoringClass>
                      <Property>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Property>
                    </HostProperty>
                  </ValueExpression>
                  <Operator>MatchesRegularExpression</Operator>
                  <Pattern>(?i)##ADFSServers##</Pattern>
                </RegExExpression>
              </Expression>
            </MembershipRule>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="MWIIS2!Microsoft.Windows.InternetInformationServices.6.2.ApplicationPool"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="MSIGL!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <HostProperty>
                      <MonitoringClass>$MPElement[Name="Windows!Microsoft.Windows.Computer"]$</MonitoringClass>
                      <Property>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Property>
                    </HostProperty>
                  </ValueExpression>
                  <Operator>MatchesRegularExpression</Operator>
                  <Pattern>(?i)##ADFSServers##</Pattern>
                </RegExExpression>
              </Expression>
            </MembershipRule>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="MWIIS2!Microsoft.Windows.InternetInformationServices.6.2.ServerRole"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="MSIGL!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <HostProperty>
                      <MonitoringClass>$MPElement[Name="Windows!Microsoft.Windows.Computer"]$</MonitoringClass>
                      <Property>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Property>
                    </HostProperty>
                  </ValueExpression>
                  <Operator>MatchesRegularExpression</Operator>
                  <Pattern>(?i)##ADFSServers##</Pattern>
                </RegExExpression>
              </Expression>
            </MembershipRule>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="MWIIS2!Microsoft.Windows.InternetInformationServices.6.2.WebServer"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="MSIGL!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <HostProperty>
                      <MonitoringClass>$MPElement[Name="Windows!Microsoft.Windows.Computer"]$</MonitoringClass>
                      <Property>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Property>
                    </HostProperty>
                  </ValueExpression>
                  <Operator>MatchesRegularExpression</Operator>
                  <Pattern>(?i)##ADFSServers##</Pattern>
                </RegExExpression>
              </Expression>
            </MembershipRule>
            <MembershipRule>
              <MonitoringClass>$MPElement[Name="MWIIS2!Microsoft.Windows.InternetInformationServices.6.2.WebSite"]$</MonitoringClass>
              <RelationshipClass>$MPElement[Name="MSIGL!Microsoft.SystemCenter.InstanceGroupContainsEntities"]$</RelationshipClass>
              <Expression>
                <RegExExpression>
                  <ValueExpression>
                    <HostProperty>
                      <MonitoringClass>$MPElement[Name="Windows!Microsoft.Windows.Computer"]$</MonitoringClass>
                      <Property>$MPElement[Name="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Property>
                    </HostProperty>
                  </ValueExpression>
                  <Operator>MatchesRegularExpression</Operator>
                  <Pattern>(?i)##ADFSServers##</Pattern>
                </RegExExpression>
              </Expression>
            </MembershipRule>
          </MembershipRules>
        </DataSource>		
      </Discovery>
    </Discoveries>
    <Rules>
      <Rule ID="Microsoft.Active.Directory.Federation.Services.2012R2.EventID7031.Alert.Rule" Enabled="true" Target="MADFS2!Microsoft.ActiveDirectoryFederationServices2012R2.FederationServer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">592</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Number of 7031 Events with ADFS2012R2 service failures</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>1</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Active.Directory.Federation.Services.2012R2.EventID7031.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/EventDescription$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Active.Directory.Federation.Services.2012R2.SummaryReport.Script.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Microsoft.Active.Directory.Federation.Services.2012R2.SummaryReport.Script.DataSource">
            <TimeoutSeconds>300</TimeoutSeconds>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="WA" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertMessageId>$MPElement[Name="Microsoft.Active.Directory.Federation.Services.2012R2.SummaryReport.Script.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/Property[@Name='Count']$</AlertParameter1>
              <AlertParameter2>$Data/Property[@Name='Message']$</AlertParameter2>
              <AlertParameter3>$Data/Property[@Name='Summary']$</AlertParameter3>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data/Property[@Name='Message']$</SuppressionValue>
            </Suppression>
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Active.Directory.Federation.Services.2012R2.SummaryReport.Script.Task.Alert.Rule" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
         <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">591</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">EventDescription</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>Proactive DailyTasks - Daily Summary Active Directory Federation Services Alerts for date</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>
            <Severity>0</Severity>
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Active.Directory.Federation.Services.2012R2.SummaryReport.Script.Task.Alert.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression />
          </WriteAction>
        </WriteActions>
      </Rule>

	  <Rule ID="Microsoft.Active.Directory.Federation.Services.2012R2.adfssrv.Service.ServiceNotFound.Recovery.Rule" Enabled="true" Target="MADFS2!Microsoft.ActiveDirectoryFederationServices2012R2.FederationServer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">3751</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
				<Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>adfssrv</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>  <!-- 0=Low 1=Medium 2=High -->
            <Severity>1</Severity>  <!-- 0=Information 1=Warning 2=Critical -->
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Active.Directory.Federation.Services.2012R2.adfssrv.Service.ServiceNotFound.Recovery.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data[Default='']/EventDisplayNumber$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/PublisherName$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10 />
          </WriteAction>
        </WriteActions>
      </Rule>
      <Rule ID="Microsoft.Active.Directory.Federation.Services.2012R2.adfssrv.Service.ServiceFoundRunning.Recovery.Rule" Enabled="true" Target="MADFS2!Microsoft.ActiveDirectoryFederationServices2012R2.FederationServer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">3752</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
				<Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>adfssrv</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>  <!-- 0=Low 1=Medium 2=High -->
            <Severity>1</Severity>  <!-- 0=Information 1=Warning 2=Critical -->
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Active.Directory.Federation.Services.2012R2.adfssrv.Service.ServiceFoundRunning.Recovery.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data[Default='']/EventDisplayNumber$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/PublisherName$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10 />
          </WriteAction>
        </WriteActions>
      </Rule>
	  <Rule ID="Microsoft.Active.Directory.Federation.Services.2012R2.adfssrv.Service.ServiceRecoveryFailed.Recovery.Rule" Enabled="true" Target="MADFS2!Microsoft.ActiveDirectoryFederationServices2012R2.FederationServer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">3753</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
				<Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>adfssrv</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>  <!-- 0=Low 1=Medium 2=High -->
            <Severity>1</Severity>  <!-- 0=Information 1=Warning 2=Critical -->
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Active.Directory.Federation.Services.2012R2.adfssrv.Service.ServiceRecoveryFailed.Recovery.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data[Default='']/EventDisplayNumber$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/PublisherName$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10 />
          </WriteAction>
        </WriteActions>
      </Rule>
	  <Rule ID="Microsoft.Active.Directory.Federation.Services.2012R2.adfssrv.Service.TooManyRecoveryAttempts.Recovery.Rule" Enabled="true" Target="MADFS2!Microsoft.ActiveDirectoryFederationServices2012R2.FederationServer" ConfirmDelivery="true" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>Alert</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.EventProvider">
            <ComputerName>$Target/Host/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
            <LogName>Operations Manager</LogName>
            <Expression>
              <And>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="UnsignedInteger">3754</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">PublisherName</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">Health Service Script</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
				<Expression>
                  <RegExExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Params/Param[2]</XPathQuery>
                    </ValueExpression>
                    <Operator>ContainsSubstring</Operator>
                    <Pattern>adfssrv</Pattern>
                  </RegExExpression>
                </Expression>
              </And>
            </Expression>
          </DataSource>
        </DataSources>
        <WriteActions>
          <WriteAction ID="Alert" TypeID="Health!System.Health.GenerateAlert">
            <Priority>1</Priority>  <!-- 0=Low 1=Medium 2=High -->
            <Severity>1</Severity>  <!-- 0=Information 1=Warning 2=Critical -->
            <AlertName />
            <AlertDescription />
            <AlertOwner />
            <AlertMessageId>$MPElement[Name="Microsoft.Active.Directory.Federation.Services.2012R2.adfssrv.Service.TooManyRecoveryAttempts.Recovery.Rule.AlertMessage"]$</AlertMessageId>
            <AlertParameters>
              <AlertParameter1>$Data/EventDescription$</AlertParameter1>
            </AlertParameters>
            <Suppression>
              <SuppressionValue>$Data[Default='']/EventDisplayNumber$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/PublisherName$</SuppressionValue>
              <SuppressionValue>$Data[Default='']/LoggingComputer$</SuppressionValue>
            </Suppression>
            <Custom1 />
            <Custom2 />
            <Custom3 />
            <Custom4 />
            <Custom5 />
            <Custom6 />
            <Custom7 />
            <Custom8 />
            <Custom9 />
            <Custom10 />
          </WriteAction>
        </WriteActions>
      </Rule>
	</Rules>
    <Tasks>
      <Task ID="Microsoft.Active.Directory.Federation.Services.2012R2.SummaryReport.Script.Task" Accessibility="Public" Enabled="true" Target="SC!Microsoft.SystemCenter.AllManagementServersPool" Timeout="120" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Microsoft.Active.Directory.Federation.Services.2012R2.SummaryReport.Script.WA">
          <TimeoutSeconds>300</TimeoutSeconds>
        </WriteAction>
      </Task>
    </Tasks>
    <Monitors>
      <UnitMonitor ID="Microsoft.Active.Directory.Federation.Services.2012R2.adfssrv.Service.Monitor" Accessibility="Public" Enabled="false" Target="MADFS2!Microsoft.ActiveDirectoryFederationServices2012R2.FederationServer" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Microsoft.Active.Directory.Federation.Services.2012R2.Service.Monitor.MonitorType" ConfirmDelivery="true">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Microsoft.Active.Directory.Federation.Services.2012R2.adfssrv.Service.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState> <!-- Warning/Error - This must match a possible OperationalState\HealthState below -->
          <AutoResolve>true</AutoResolve> <!-- true/false -->
          <AlertPriority>Normal</AlertPriority> <!-- Low/Normal/High -->
          <AlertSeverity>Warning</AlertSeverity> <!-- Error/Warning/Information/MatchMonitorHealth -->
          <AlertParameters>
            <AlertParameter1>$Data/Context/Property[@Name='Name']$</AlertParameter1>
            <AlertParameter2>$Target/Host/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</AlertParameter2>
          </AlertParameters>
        </AlertSettings>		
        <OperationalStates>
          <OperationalState ID="Running" MonitorTypeStateID="Running" HealthState="Success" /> <!-- HealthState can be Error/Warning/Success -->
          <OperationalState ID="NotRunning" MonitorTypeStateID="NotRunning" HealthState="Warning" /> <!-- HealthState can be Error/Warning/Success -->
        </OperationalStates>
        <Configuration>
          <ComputerName />
          <ServiceName>adfssrv</ServiceName> <!-- This is the service name as seen in the registry at HKLM\SYSTEM\CCS\Services -->
          <IntervalSeconds>300</IntervalSeconds> <!-- How often to check the state of the service.  Every 30 seconds is the default.-->
          <CheckStartupType>true</CheckStartupType>
          <Samples>3</Samples> <!-- The number of consecutive times a service is detected as not running before changing state of the monitor. 2 samples is the default -->
        </Configuration>		
      </UnitMonitor>
      <UnitMonitor ID="Microsoft.Active.Directory.Federation.Services.2012R2.EventID7031.Monitor" Accessibility="Public" Enabled="true" Target="MADFS2!Microsoft.ActiveDirectoryFederationServices2012R2.FederationServer" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Microsoft.Active.Directory.Federation.Services.2012R2.EventID7031.Monitor.MonitorType" ConfirmDelivery="true">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Microsoft.Active.Directory.Federation.Services.2012R2.EventID7031.Monitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>  <!-- Warning or Error should match OperationalStates below  -->
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>  <!-- Common options for AlertSeverity are MatchMonitorHealth, Information, Warning, Error -->
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="GoodCondition" MonitorTypeStateID="GoodCondition" HealthState="Success" />
          <OperationalState ID="BadCondition" MonitorTypeStateID="BadCondition" HealthState="Warning" />  <!-- HealthState = Warning or Error -->
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>900</IntervalSeconds>
		  <SyncTime></SyncTime>
          <TimeoutSeconds>120</TimeoutSeconds>
        </Configuration>
      </UnitMonitor>
	</Monitors> 
    <Recoveries>
      <Recovery ID="Microsoft.Active.Directory.Federation.Services.2012R2.adfssrv.Service.Recovery" Accessibility="Public" Enabled="true" Target="MADFS2!Microsoft.ActiveDirectoryFederationServices2012R2.FederationServer" Monitor="Microsoft.Active.Directory.Federation.Services.2012R2.adfssrv.Service.Monitor" ResetMonitor="true" ExecuteOnState="Warning" Remotable="true" Timeout="300">
        <Category>Custom</Category>
		<WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
		  <ScriptName>Microsoft.Active.Directory.Federation.Services.2012R2.adfssrv.Service.Recovery.v1018.ps1</ScriptName>
		  <ScriptBody>
#=================================================================================
#  Script to restart a service
#
#  Author:  Kevin Holman
#
#  Version:  1.0
#
#=================================================================================


# Manual Testing section - put stuff here for manually testing script - typically parameters:
#=================================================================================
# $ServiceName = "masvc"
#=================================================================================


# Constants section - modify stuff here:
#=================================================================================
# Assign script name variable for use in event logging
$ScriptName = "Microsoft.Active.Directory.Federation.Services.2012R2.adfssrv.Service.Recovery.v1018.ps1"
$EventID = "3750"
#=================================================================================


# Starting Script section
#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
#Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject MOM.ScriptAPI
#=================================================================================


# Begin MAIN script section
#=================================================================================

[string]$ServiceName = "masvc"

#Log script event that we are starting task
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Recovery script for service: ($ServiceName) is starting. `n Running as ($whoami).")
write-host "Recovery script for service: ($ServiceName) is starting. Running as ($whoami)."

#Get the service object
$Svc = Get-Service $ServiceName

#Check to ensure the service exists:
IF (!$Svc)
{
  $momapi.LogScriptEvent($ScriptName,3751,2, "`n Service ($ServiceName) was not found on this computer. `n This indicates a misconfiguration of the monitor. `n Error is ($error)")
  write-host "Service ($ServiceName) was not found on this computer. This indicates a misconfiguration of the monitor. Error is ($error)"
  EXIT
}

#Get Service Status:
[string]$SvcStatus = $Svc.Status

#Do not continue is service is already running
IF ($SvcStatus -eq "Running")
{
  $momapi.LogScriptEvent($ScriptName,3752,2, "`n Service ($ServiceName) was found to be in the Running state. `n This indicates a misconfiguration of the monitor. `n No recovery action will be taken.")
  write-host "Service ($ServiceName) was found to be in the Running state. This indicates a misconfiguration of the monitor. No recovery action will be taken."
  EXIT  
}

#Log recovery information event
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Service: ($ServiceName) was found to be in the ($SvcStatus) state.  Recovery will be attempted.")
write-host "Service: ($ServiceName) was found to be in the ($SvcStatus) state.  Recovery will be attempted."

#Attempt First Recovery
#Restart-Service -Name $ServiceName -Force
get-Service -Name $ServiceName | start-service
#Wait time in seconds
Start-Sleep 20
#Get the service object
$Svc = Get-Service $ServiceName
#Get Service Status:
$SvcStatus = $Svc.Status

IF ($SvcStatus -ne "Running")
{
  #Attempt Second Recovery
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Service: ($ServiceName) second attempt at recovering starting now.")
  write-host "Service: ($ServiceName) second attempt at recovering starting now."  
  #Restart-Service -Name $ServiceName -Force
	get-Service -Name $ServiceName | start-service
  Start-Sleep 20
  $Svc = Get-Service $ServiceName
  $SvcStatus = $Svc.Status 
}

IF ($SvcStatus -ne "Running")
{
  #Attempt Third Recovery
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Service: ($ServiceName) third attempt at recovering starting now.")
  write-host "Service: ($ServiceName) third attempt at recovering starting now."    
  #Restart-Service -Name $ServiceName -Force
	get-Service -Name $ServiceName | start-service
  Start-Sleep 20
  $Svc = Get-Service $ServiceName
  $SvcStatus = $Svc.Status 
}

IF ($SvcStatus -eq "Running")
{
  #Log event of a successful restart
  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Service: ($ServiceName) was successfully restarted and then detected to be in the Running state.")
  write-host "Service: ($ServiceName) was successfully restarted and then detected to be in the Running state."
}
ELSE
{
  #Log event of a successful restart
  $momapi.LogScriptEvent($ScriptName,3753,2,"`n Service: ($ServiceName) is not running. `n Recovery was attempted and failed. `n Manual intervention is required. `n The last detected service status was ($SvcStatus).") 
  write-host "Service: ($ServiceName) is not running. Recovery was attempted and failed. Manual intervention is required. The last detected service status was ($SvcStatus)."
}

# Check to see if this recovery script has been run multiple times in the last x minutes for detection of too many recovery actions
$Message = "*($ServiceName) is starting*"
$Events = Get-EventLog -LogName 'Operations Manager' -After $StartTime.AddMinutes(-60) -Message $Message | where {$_.EventID -eq 3750}
$EventCount = $Events.Count
IF ($EventCount -ge 3)
{
  $momapi.LogScriptEvent($ScriptName,3754,2,"`n Too many service recoveries have been attempted for ($ServiceName). `n ($EventCount) recoveries are detected in the event log. `n Manual intervention is required.")
  write-host "Too many service recoveries have been attempted for ($ServiceName). ($EventCount) recoveries are detected in the event log. Manual intervention is required."
}

# End of script section
#=================================================================================
#Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
write-host "Script Completed. Script Runtime: ($ScriptTime) seconds."
#=================================================================================
# End of script		  
		  </ScriptBody>
		  <TimeoutSeconds>240</TimeoutSeconds>
		</WriteAction>
      </Recovery>
    </Recoveries>
    <Overrides>
      <MonitorPropertyOverride ID="Override.Microsoft.Active.Directory.Federation.Services.2012R2.adfssrv.Service.Monitor" Context="MADFS2!Microsoft.ActiveDirectoryFederationServices2012R2.FederationServer" Enforced="false" Monitor="MADFS2!Microsoft.ActiveDirectoryFederationServices2012R2.FederationServerServiceMonitor" Property="Enabled">
        <Value>false</Value>
      </MonitorPropertyOverride>
    </Overrides>
  </Monitoring>
  <Presentation>
    <StringResources>
	  <StringResource ID="Microsoft.Active.Directory.Federation.Services.2012R2.SummaryReport.Script.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Active.Directory.Federation.Services.2012R2.SummaryReport.Script.Task.Alert.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Active.Directory.Federation.Services.2012R2.adfssrv.Service.Monitor.AlertMessage" />	
	  <StringResource ID="Microsoft.Active.Directory.Federation.Services.2012R2.adfssrv.Service.ServiceNotFound.Recovery.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Active.Directory.Federation.Services.2012R2.adfssrv.Service.ServiceFoundRunning.Recovery.Rule.AlertMessage" />
	  <StringResource ID="Microsoft.Active.Directory.Federation.Services.2012R2.adfssrv.Service.ServiceRecoveryFailed.Recovery.Rule.AlertMessage" />
	  <StringResource ID="Microsoft.Active.Directory.Federation.Services.2012R2.adfssrv.Service.TooManyRecoveryAttempts.Recovery.Rule.AlertMessage" />
      <StringResource ID="Microsoft.Active.Directory.Federation.Services.2012R2.EventID7031.Monitor.AlertMessage" />
	  <StringResource ID="Microsoft.Active.Directory.Federation.Services.2012R2.EventID7031.Alert.Rule.AlertMessage" />
	</StringResources>
  </Presentation>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="false">
      <DisplayStrings>
        <DisplayString ElementID="Microsoft.Active.Directory.Federation.Services.2012R2.Addendum">
          <Name>Microsoft Active Directory Federation Services 2012R2 Addendum</Name>
          <Description>
v1.0.1.8  27 Dec 2023 - Updated Monitor/Rule closure logic, whitespace audit
v1.0.1.7  30 Nov 2023 - Removed debug detail into DS/WA to prevent HealthExplorer output
v1.0.1.6  16 Nov 2023 - Updates for recovery task, generic ##ADFSServer##, and local vs. GMT time for report DS
v1.0.1.5  18 Jul 2023 - Updated reports to informational, Disabled SAML verification rule, SQL Notification Registration monitor
v1.0.1.2  20 Jun 2022 - Updated group and event overridev1
v1.0.0.2  12 Jan 2022 - Updated details to break out ADFS issue types - MEX, Token, FsProxy etc.
v1.0.0.0  19 Jul 2021 - Created ADFS2012 addendum pack</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Active.Directory.Federation.Services.2012R2.Monitoring.Group">
          <Name>Microsoft Active Directory Federation Services ADFS2012R2 application subscription components</Name>
          <Description>Microsoft Active Directory Federation Services ADFS2012R2 application subscription components Group targeted Discovery</Description>
        </DisplayString>
		<DisplayString ElementID="Microsoft.Active.Directory.Federation.Services.2012R2.SummaryReport.Script.DataSource">	
          <Name>Proactive DailyTasks ADFS2012R2 Alerts Summary Report and auto-close DataSource</Name>
          <Description>This datasource generates DNSAlerts summary report and auto-close DataSource</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Active.Directory.Federation.Services.2012R2.SummaryReport.Script.Alert.Rule">
          <Name>Proactive DailyTasks ADFS2012R2 Alerts Summary Report Script Alert Rule</Name>
          <Description>Proactive Scheduled rule to kick off summary datasource at 0615 M-F</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Active.Directory.Federation.Services.2012R2.SummaryReport.Script.Alert.Rule.AlertMessage">
          <Name>Proactive DailyTasks ADFS2012R2 Alerts Summary Report Script Alert Rule</Name>
          <Description>{1}

{2}</Description>
        </DisplayString>
		
        <DisplayString ElementID="Microsoft.Active.Directory.Federation.Services.2012R2.SummaryReport.Script.WA">	
          <Name>Proactive DailyTasks ADFS2012R2 Service Alerts summary report and auto-close on-demand task</Name>
          <Description>This write-action task generates DNSAlerts summary report and auto-close write action</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Active.Directory.Federation.Services.2012R2.SummaryReport.Script.Task">
          <Name>Proactive DailyTasks ADFS2012R2 Service Alerts Summary Report Script Task</Name>
          <Description>Microsoft Active Directory Federation Services 2012R2 Summary Report task to kick off on-demand</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Active.Directory.Federation.Services.2012R2.SummaryReport.Script.Task.Alert.Rule">
          <Name>Proactive DailyTasks ADFS2012R2 Alerts Summary Report Manual Task Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Active.Directory.Federation.Services.2012R2.SummaryReport.Script.Task.Alert.Rule.AlertMessage">
          <Name>Proactive DailyTasks ADFS2012R2 Service Alerts Summary Report Script Task Rule Alert</Name>
          <Description>{0}</Description>
        </DisplayString>
		
        <DisplayString ElementID="Microsoft.Active.Directory.Federation.Services.2012R2.adfssrv.Service.Monitor">
          <Name>Microsoft Active Directory Federation Services 2012R2 adfssrv Service Monitor</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Active.Directory.Federation.Services.2012R2.adfssrv.Service.Monitor" SubElementID="Running">
          <Name>Running</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Active.Directory.Federation.Services.2012R2.adfssrv.Service.Monitor" SubElementID="NotRunning">
          <Name>Not Running</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Active.Directory.Federation.Services.2012R2.adfssrv.Service.Monitor.AlertMessage">
          <Name>Microsoft Active Directory Federation Services 2012R2 adfssrv Service Is Not Running</Name>
          <Description>The Service: {0} is not running on Computer: {1}</Description>
        </DisplayString>		
        <DisplayString ElementID="Microsoft.Active.Directory.Federation.Services.2012R2.adfssrv.Service.Recovery">
          <Name>Microsoft Active Directory Federation Services 2012R2 adfssrv Service Service Recovery</Name>
        </DisplayString>
		<DisplayString ElementID="Microsoft.Active.Directory.Federation.Services.2012R2.adfssrv.Service.ServiceNotFound.Recovery.Rule">
          <Name>Microsoft Active Directory Federation Services 2012R2 adfssrv Service Service Recovery Failed - Service Not Found Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Active.Directory.Federation.Services.2012R2.adfssrv.Service.ServiceNotFound.Recovery.Rule.AlertMessage">
          <Name>Microsoft Active Directory Federation Services 2012R2 adfssrv Service Recovery Failed - Service Not Found</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>		  
		<DisplayString ElementID="Microsoft.Active.Directory.Federation.Services.2012R2.adfssrv.Service.ServiceFoundRunning.Recovery.Rule">
          <Name>Microsoft Active Directory Federation Services 2012R2 adfssrv Service Service Recovery Failed - Service Already Running Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Active.Directory.Federation.Services.2012R2.adfssrv.Service.ServiceFoundRunning.Recovery.Rule.AlertMessage">
          <Name>Microsoft Active Directory Federation Services 2012R2 adfssrv Service Recovery Failed - Service Already Running</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
		<DisplayString ElementID="Microsoft.Active.Directory.Federation.Services.2012R2.adfssrv.Service.ServiceRecoveryFailed.Recovery.Rule">
          <Name>Microsoft Active Directory Federation Services 2012R2 adfssrv Service Service Recovery Failed - Service is not running Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Active.Directory.Federation.Services.2012R2.adfssrv.Service.ServiceRecoveryFailed.Recovery.Rule.AlertMessage">
          <Name>Microsoft Active Directory Federation Services 2012R2 adfssrv Service Recovery Failed - Service is not running</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>
		<DisplayString ElementID="Microsoft.Active.Directory.Federation.Services.2012R2.adfssrv.Service.TooManyRecoveryAttempts.Recovery.Rule">
          <Name>Microsoft Active Directory Federation Services 2012R2 adfssrv Service Service Recovery has attempted to recover the service too many times Rule</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Active.Directory.Federation.Services.2012R2.adfssrv.Service.TooManyRecoveryAttempts.Recovery.Rule.AlertMessage">
          <Name>Microsoft Active Directory Federation Services 2012R2 adfssrv Service Recovery has attempted to recover the service too many times</Name>
          <Description>Event Description: {0}</Description>
        </DisplayString>

        <DisplayString ElementID="Microsoft.Active.Directory.Federation.Services.2012R2.EventID7031.Alert.Rule">
          <Name>Microsoft Active Directory Federation Services 2012R2 EventID7031 Rule</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Active.Directory.Federation.Services.2012R2.EventID7031.Alert.Rule.AlertMessage">
          <Name>Microsoft Active Directory Federation Services 2012R2 EventID7031 Rule Alert</Name>
          <Description>Microsoft Active Directory Federation Services 2012R2 EventID7031 Rule in System Event Log</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Active.Directory.Federation.Services.2012R2.EventID7031.Monitor">
          <Name>Microsoft Active Directory Federation Services 2012R2 EventID7031 Monitor</Name>
          <Description>Check for System Event ID 7031 with adfssrv in the event description</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Active.Directory.Federation.Services.2012R2.EventID7031.Monitor" SubElementID="GoodCondition">
          <Name>Good Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Active.Directory.Federation.Services.2012R2.EventID7031.Monitor" SubElementID="BadCondition">
          <Name>Bad Condition</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Active.Directory.Federation.Services.2012R2.EventID7031.Monitor.AlertMessage">
          <Name>Microsoft Active Directory Federation Services 2012R2 EventID7031 Monitor alert</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Override.Microsoft.Active.Directory.Federation.Services.2012R2.adfssrv.Service.Monitor">
          <Name>NotUsed</Name>
          <Description>20 July 2021 - KWJ - Disable adfssrv service monitor for addendum</Description>
        </DisplayString>
      </DisplayStrings>
      <KnowledgeArticles>
        <KnowledgeArticle ElementID="Microsoft.Active.Directory.Federation.Services.2012R2.EventID7031.Monitor" Visible="true">
          <MamlContent>
            <section xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>The ADFS server has System Event Log, EventID 7031 events in past 15 minutes</maml:para>
            </section>
            <section xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Causes</maml:title>
              <maml:para>This can happen for a few reasons:</maml:para>
              <maml:para />
              <maml:list>
                <maml:listItem>
                  <maml:para>ADFS certificates may not be valid</maml:para>
                </maml:listItem>
                <maml:listItem>
                  <maml:para>Service may not be running</maml:para>
                </maml:listItem>
                <maml:listItem>
                  <maml:para>NOTE:  This impacts SharePoint for authentications</maml:para>
                </maml:listItem>
              </maml:list>
            </section>
            <section xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>Try the following troubleshooting steps to attempt to fix the problem</maml:para>
              <maml:para />
              <maml:list>
                <maml:listItem>
                  <maml:para>RDP to affected ADFS server to troubleshoot.</maml:para>
                  <maml:para>After RDP, verify ADFSsrv service is running</maml:para>
                </maml:listItem>
                <maml:listItem>
                  <maml:para>Leverage PowerShell (as Admin) to run 'get-service ProVService' to verify service state</maml:para>
                  <maml:para>In PowerShell window (MUST be running as Admin), run 'get-service ProVService | start-service' to restart affected service</maml:para>
                </maml:listItem>
                <maml:listItem>
                  <maml:para>Additionally, run get-eventlog command to see how current issue is, or if impact is current and on-going.</maml:para>
				  <maml:para>Command to run:  get-eventlog -LogName "System" | ? { ( $_.EventID -eq 7031 ) -AND ($_.Message -like "*advssrv*") }</maml:para>
                </maml:listItem>
              </maml:list>
            </section>
          </MamlContent>
        </KnowledgeArticle>
      </KnowledgeArticles>
    </LanguagePack>
  </LanguagePacks>
</ManagementPack>